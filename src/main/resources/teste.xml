<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.2.xsd
    http://www.springframework.org/schema/security/oauth2
    http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">

<!-- 	<context:property-placeholder location="classpath:main.properties" /> -->

	<sec:global-method-security
		pre-post-annotations="enabled" />

	<oauth:expression-handler id="oauthExpressionHandler" />

	<!-- Definition of the Authentication Service -->
	<sec:http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager">
		<sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<sec:anonymous enabled="false" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request 
			parameters -->
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>

	<!-- Protected resources -->
	<sec:http auto-config="true" entry-point-ref="oauthAuthenticationEntryPoint" />

	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="dstest" />
	</bean>

	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="dstest/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<!-- Authentication in config file -->
	<sec:authentication-manager id="clientAuthenticationManager">
		<sec:authentication-provider
			user-service-ref="clientDetailsUserService" />
	</sec:authentication-manager>

	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider>
			<sec:jdbc-user-service data-source-ref="securityDataSource" />
		</sec:authentication-provider>
	</sec:authentication-manager>

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<!-- Token Store -->
	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
		<constructor-arg ref="securityDataSource" />
	</bean>

	<bean id="oAuth2RequestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
		<constructor-arg ref="clientDetails" />
	</bean>

	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
		<!-- VIV -->
		<property name="accessTokenValiditySeconds" value="10" />
	</bean>

	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
		<property name="tokenStore" ref="tokenStore" />
		<property name="requestFactory" ref="oAuth2RequestFactory" />
	</bean>

	<!-- Token management -->
	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler" token-endpoint-url="/oauth/token">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter"
		resource-id="dstest" token-services-ref="tokenServices" />

	<!-- Client Definition -->
	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="healthdata-client"
			authorized-grant-types="password,authorization_code,refresh_token,implicit,redirect"
			authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" redirect-uri="/web"
			scope="read,write,trust" access-token-validity="300"
			refresh-token-validity="6000" />
	</oauth:client-details-service>
</beans>